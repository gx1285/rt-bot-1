# RT - Channel Message

from __future__ import annotations

from discord.ext import commands
import discord

from core import Cog, RT, t, DatabaseManager, cursor

from rtutil import content_data
from rtutil.utils import artificially_send

from rtlib.common.json import loads, dumps

from data import SET_ALIASES, DELETE_ALIASES, LIST_ALIASES, FORBIDDEN, NOTFOUND

from .__init__ import FSPARENT


class DataManager(DatabaseManager):
    "チャンネルメッセージのデータを管理するためのクラスです。"

    def __init__(self, cog: ChannelMessage):
        self.cog = cog
        self.pool = self.cog.bot.pool

    async def preapre_table(self) -> None:
        "テーブルを作る。"
        await cursor.execute(
            """CREATE TABLE IF NOT EXISTS ChannelMessage (
                GuildId BIGINT, CategoryId BIGINT PRIMARY KEY NOT NULL,
                Content JSON
            );"""
        )

    async def read(self, category_id: int) -> None | content_data.ContentData:
        "カテゴリーのIDからチャンネルメッセージの内容を取得します。"
        await cursor.execute(
            "SELECT Content FROM ChannelMessage WHERE CategoryId = %s LIMIT 1;",
            (category_id,)
        )
        if row := await cursor.fetchone():
            return content_data.disable_content_json(loads(row[0]))

    async def write(
        self, guild_id: int, category_id: int,
        data: content_data.ContentData
    ) -> None:
        "チャンネルメッセージを設定します。"
        await cursor.execute(
            """INSERT INTO ChannelMessage VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE Content = %s;""",
            (guild_id, category_id, raw := dumps(data), raw)
        )

    async def delete(self, category_id: int) -> None:
        "チャンネルメッセージの設定を削除します。"
        await cursor.execute(
            "DELETE FROM ChannelMessage WHERE CategoryId = %s;",
            (category_id,)
        )

    async def read_all(self, guild_id: int) -> dict[int, content_data.ContentData]:
        "チャンネルメッセージの設定のリストを返します。"
        await cursor.execute(
            "SELECT CategoryId, Content FROM ChannelMessage WHERE GuildId = %s;",
            (guild_id,)
        )
        return {
            row[0]: content_data.disable_content_json(loads(row[1]))
            for row in await cursor.fetchall()
        }

    async def clean(self) -> None:
        "データのお掃除をします。"
        await self.clean_data(cursor, "ChannelMessage", "CategoryId")


class ChannelMessageEventContext(Cog.EventContext):
    "チャンネルメッセージのイベントコンテキストです。"

    channel: discord.TextChannel


class ChannelMessage(Cog):
    "チャンネルメッセージのコグです。"

    def __init__(self, bot: RT):
        self.bot = bot
        self.data = DataManager(self)

    async def cog_load(self):
        await self.data.preapre_table()

    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel: discord.abc.GuildChannel):
        if not isinstance(channel, discord.TextChannel) or channel.category is None:
            return

        if (data := await self.data.read(channel.category.id)) is not None:
            detail = ""
            try:
                await artificially_send(
                    channel, channel.guild.get_member(data["author"]) or channel.guild.me,
                    **content_data.disable_content_json(data)["content"]
                )
            except discord.Forbidden:
                detail = FORBIDDEN
            self.bot.rtevent.dispatch("on_channel_message_send", ChannelMessageEventContext(
                self.bot, channel.guild, self.detail_or(detail), {
                    "ja": "チャンネルメッセージ", "en": "Channel Message"
                }, detail or {"ja": f"送信先のチャンネル：{channel}", "en": f"TargetChannel: {channel}"},
                self.channel_message
            ))

    @commands.group(
        aliases=("chm", "チャンネルメッセージ", "チャメス"), fsparent=FSPARENT,
        description="Sets the message to be sent when a channel is created."
    )
    async def channel_message(self, ctx: commands.Context):
        await self.group_index(ctx)

    @channel_message.command("set", aliases=SET_ALIASES, description="Set the setting.")
    @discord.app_commands.describe(content="Message to be sent. You can use the code which generated by `Get content`.")
    async def set_(self, ctx: commands.Context, *, content: str):
        async with ctx.typing():
            assert isinstance(ctx.channel, discord.Thread | discord.TextChannel) \
                and ctx.guild is not None and self.bot.user is not None
            await self.data.write(
                ctx.guild.id, getattr(ctx.channel.category, "id", 0),
                content_data.convert_content_json(content, self.bot.user.id)
            )
        await ctx.reply("Ok")

    @channel_message.command(aliases=DELETE_ALIASES, description="Delete the setting.")
    async def delete(self, ctx: commands.Context):
        async with ctx.typing():
            assert isinstance(ctx.channel, discord.Thread | discord.TextChannel)
            await self.data.delete(getattr(ctx.channel.category, "id", 0))
        await ctx.reply("Ok")

    @channel_message.command(
        "list", aliases=LIST_ALIASES,
        description="Display the list of setting."
    )
    async def list_(self, ctx: commands.Context):
        await ctx.typing()
        assert ctx.guild is not None
        await ctx.reply(embed=self.embed(description="\n".join("<#{}>: {}".format(
            id_, content_data.to_text(content)
        ) for id_, content in (await self.data.read_all(ctx.guild.id)).items())))

    (Cog.HelpCommand(channel_message)
        .merge_description(ja=(_d := "チャンネルが作成された際に送信するメッセージを設定します。"))
        .merge_headline(ja=_d)
        .add_sub(Cog.HelpCommand(set_)
            .merge_description(
                ja="""チャンネルメッセージを設定します。
                実行したチャンネルのカテゴリーで、チャンネルが作られた際にそのチャンネルにメッセージが送信されます。""",
                en=f"{set_.description}\nA message is sent to the channel when the channel is created in the category of the executed channel."
            )
            .add_arg("content", "str",
                ja="送信するメッセージです。`Get content`で取得したコードを使うこともできます。"))
        .add_sub(Cog.HelpCommand(delete).merge_description(ja="設定を消します。"))
        .add_sub(Cog.HelpCommand(list_).merge_description(ja="設定を表示します。")))


async def setup(bot: RT) -> None:
    await bot.add_cog(ChannelMessage(bot))